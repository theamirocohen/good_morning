version: 2.1
orbs:
  python: circleci/python@2
jobs:
  test-python:
    docker:
      - image: cimg/python:3.8-node
    steps:
      - checkout
      - python/install-packages
      - run:
          name: Run tests
          #command: pytest --junitxml=junit.xml || ((($? == 5)) && echo 'Did not find any tests to run.')
          command: echo "no tests aval at this time"
      - store_test_results:
          path: junit.xml
  build-docker-image:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t my-app:${CIRCLE_SHA1} .
  run-docker-tests:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Pull built Docker image
          command: |
            docker image inspect my-app:${CIRCLE_SHA1} || docker build -t my-app:${CIRCLE_SHA1} .
      - run:
          name: Run container in background
          command: |
            docker run -d -p 5000:5000 --name test-container my-app:${CIRCLE_SHA1}
      # - run:
      #     name: Wait for container to be ready
      #     command: |
      #       for i in {1..25}; do
      #         if curl -s -o /dev/null http://localhost:5000; then
      #           echo "App is up!"; break;
      #         fi
      #         echo "Waiting for app..."; sleep 2;
      #       done
      # - run:
      #     name: Test HTTP 200 OK
      #     command: |
      #       http_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000)
      #       if [ "$http_code" = "200" ]; then
      #         echo "Received 200 OK!"
      #       else
      #         echo "Expected 200 but got $http_code"; exit 1
      #       fi
      - run:
          name: Stop and remove test container
          command: docker rm -f test-container
  build-and-push-gitlab:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t registry.gitlab.com/YOUR_GITLAB_NAMESPACE/YOUR_PROJECT_NAME:latest .
      - run:
          name: Login to GitLab Registry
          command: echo "$GITLAB_REGISTRY_PASSWORD" | docker login registry.gitlab.com -u "$GITLAB_REGISTRY_USER" --password-stdin
      - run:
          name: Push Docker image to GitLab Registry
          command: docker push registry.gitlab.com/YOUR_GITLAB_NAMESPACE/YOUR_PROJECT_NAME:latest
workflows:
  build-and-test:
    jobs:
      - test-python
      - build-docker-image:
          requires:
            - test-python
      - run-docker-tests:
          requires:
            - build-docker-image
      - build-and-push-gitlab:
          requires:
            - run-docker-tests
